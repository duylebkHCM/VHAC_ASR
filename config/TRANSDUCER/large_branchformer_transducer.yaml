# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 091001
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]


data_folder: dataset/raw_data/ # In this case, data will be automatically downloaded here.
# data_folder_rirs: !ref <data_folder> # noise/ris dataset will automatically be downloaded here
output_folder: !ref weight/TRANSDUCER_BPE_viettel_asr_30h_100h_moredata/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Path where data manifest files will be stored. The data manifest files are created by the
# data preparation script
train_annotation: dataset/processed_label/combine_label/v2/train.json
valid_annotation: dataset/processed_label/combine_label/v2/valid.json
skip_prep: True

ckpt_interval_minutes: 15 # save checkpoint every N min

# Training parameters
# To make Transformers converge, the global bath size should be large enough.
# The global batch size is computed as batch_size * n_gpus * gradient_accumulation.
# Empirically, we found that this value should be >= 128.
# Please, set your parameters accordingly.
number_of_epochs: 100
num_workers: 4
warmup_steps: 60000
batch_size_valid: 4
lr: 0.0008
weight_decay: 1.e-3
number_of_ctc_epochs: 20
ctc_weight: 0.3 # Multitask with CTC for the encoder (0.0 = disabled)
ce_weight: 0.0 # Multitask with CE for the decoder (0.0 = disabled)
max_grad_norm: 5.0
sorting: descending
loss_reduction: 'batchmean'

# The batch size is used if and only if dynamic batching is set to False
# Validation and testing are done with fixed batches and not dynamic batching.
batch_size: 4
grad_accumulation_factor: 1

# Feature parameters
sample_rate: 16000
n_fft: 512
n_mels: 80
win_length: 25
hop_length: 10

# Decoding parameters
blank_index: 0
bos_index: 0
eos_index: 0
pad_index: 0
nbest: 1

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    collate_fn: !name:speechbrain.dataio.batch.PaddedBatch
        padding_kwargs:
            value: !ref <pad_index>

valid_dataloader_opts:
    batch_size: !ref <batch_size>
    collate_fn: !name:speechbrain.dataio.batch.PaddedBatch
        padding_kwargs:
            value: !ref <pad_index>


# This setup works well for 3090 24GB GPU, adapt it to your needs.
# Adjust grad_accumulation_factor depending on the DDP node count (here 3)
# Or turn it off (but training speed will decrease)
dynamic_batching: True
max_batch_len: 80
max_batch_len_val: 100
num_bucket: 200

dynamic_batch_sampler:
   max_batch_len: !ref <max_batch_len>
   max_batch_len_val: !ref <max_batch_len_val>
   num_buckets: !ref <num_bucket>
   shuffle_ex: True # if true re-creates batches at each epoch shuffling examples.
   batch_ordering: descending
   max_batch_ex: 256

# Model parameters
# Transformer
d_model: 512
joint_dim: 640
nhead: 8
num_encoder_layers: 12
num_decoder_layers: 0
transformer_dropout: 0.1
activation: !name:torch.nn.GELU
csgu_linear_units: 3072
csgu_kernel_size: 11
output_neurons: 2000
dec_dim: 512
dec_emb_dropout: 0.2
dec_dropout: 0.1

# If True uses torchaudio loss. Otherwise, the numba one
use_torchaudio: True

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
   limit: !ref <number_of_epochs>

normalize: !new:speechbrain.processing.features.InputNormalization
   norm_type: global
   update_until_epoch: 4

compute_features: !new:speechbrain.lobes.features.Fbank
   sample_rate: !ref <sample_rate>
   n_fft: !ref <n_fft>
   n_mels: !ref <n_mels>
   win_length: !ref <win_length>
   hop_length: !ref <hop_length>

augmentation_time: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

use_augmentation_spec: False
augmentation_spec: !new:speechbrain.lobes.augment.SpecAugment
  time_warp: true
  time_warp_window: 5
  time_warp_mode: bicubic
  freq_mask: true
  n_freq_mask: 2
  time_mask: true
  n_time_mask: 5
  replace_with_zero: false
  freq_mask_width: 30
  time_mask_width: 20

env_corrupt: !new:utils.CustomEnvCorrupt
  openrir_folder: noise/RIRS_NOISES
  babble_prob: 0.0
  reverb_prob: 0.5
  noise_prob: 0.5
  noise_snr_low: 0
  noise_snr_high: 15
  reverb_csv: noise/reverb.csv
  noise_csv: noise/noise.csv


speed_perturb: !new:speechbrain.processing.speech_augmentation.SpeedPerturb
   orig_freq: !ref <sample_rate>
   speeds: [95, 100, 105]

CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
   input_shape: (8, 10, 80)
   num_blocks: 2
   num_layers_per_block: 1
   out_channels: (64, 32)
   kernel_sizes: (3, 3)
   strides: (2, 2)
   residuals: (True, True)

Transformer: !new:speechbrain.lobes.models.transformer.TransformerASR.TransformerASR # yamllint disable-line rule:line-length
   input_size: 640
   tgt_vocab: !ref <output_neurons>
   d_model: !ref <d_model>
   nhead: !ref <nhead>
   num_encoder_layers: !ref <num_encoder_layers>
   num_decoder_layers: !ref <num_decoder_layers>
   dropout: !ref <transformer_dropout>
   activation: !ref <activation>
   branchformer_activation: !ref <activation>
   csgu_linear_units: !ref <csgu_linear_units>
   encoder_module: branchformer
   attention_type: RelPosMHAXL
   kernel_size: !ref <csgu_kernel_size>
   normalize_before: True
   causal: False

# We must call an encoder wrapper so the decoder isn't run (we don't have any)
enc: !new:speechbrain.lobes.models.transformer.TransformerASR.EncoderWrapper
   transformer: !ref <Transformer>

# For MTL CTC over the encoder
proj_ctc: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <joint_dim>
   n_neurons: !ref <output_neurons>

# Define some projection layers to make sure that enc and dec
# output dim are the same before joining
proj_enc: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <d_model>
   n_neurons: !ref <joint_dim>
   bias: False

proj_dec: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <dec_dim>
   n_neurons: !ref <joint_dim>
   bias: False

# Uncomment for MTL with CTC
ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
   blank_index: !ref <blank_index>
   reduction: !ref <loss_reduction>

emb: !new:speechbrain.nnet.embedding.Embedding
   num_embeddings: !ref <output_neurons>
   consider_as_one_hot: True
   blank_id: !ref <blank_index>

dec: !new:speechbrain.nnet.RNN.LSTM
   input_shape: [null, null, !ref <output_neurons> - 1]
   hidden_size: !ref <dec_dim>
   num_layers: 1
   re_init: True

# For MTL
ce_cost: !name:speechbrain.nnet.losses.nll_loss
   label_smoothing: 0.1

Tjoint: !new:speechbrain.nnet.transducer.transducer_joint.Transducer_joint
   joint: sum # joint [sum | concat]
   nonlinearity: !ref <activation>

transducer_lin: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <joint_dim>
   n_neurons: !ref <output_neurons>
   bias: False

log_softmax: !new:speechbrain.nnet.activations.Softmax
   apply_log: True

transducer_cost: !name:speechbrain.nnet.losses.transducer_loss
   blank_index: !ref <blank_index>
   use_torchaudio: !ref <use_torchaudio>

# for MTL
# update model if any HEAD module is added
modules:
   CNN: !ref <CNN>
   enc: !ref <enc>
   emb: !ref <emb>
   dec: !ref <dec>
   Tjoint: !ref <Tjoint>
   transducer_lin: !ref <transducer_lin>
   normalize: !ref <normalize>
   proj_ctc: !ref <proj_ctc>
   proj_dec: !ref <proj_dec>
   proj_enc: !ref <proj_enc>
   env_corrupt: !ref <env_corrupt>

# for MTL
# update model if any HEAD module is added
model: !new:torch.nn.ModuleList
   - [!ref <CNN>, !ref <enc>, !ref <emb>, !ref <dec>, !ref <proj_enc>, !ref <proj_dec>, !ref <proj_ctc>, !ref <transducer_lin>]

# Tokenizer initialization
tokenizer_model: tokenizer/save/tokenize_2K/2000_unigram.model

Greedysearcher: !new:speechbrain.decoders.transducer.TransducerBeamSearcher
    decode_network_lst: [!ref <emb>, !ref <dec>, !ref <proj_dec>]
    tjoint: !ref <Tjoint>
    classifier_network: [!ref <transducer_lin>]
    blank_id: !ref <blank_index>
    beam_size: 1
    nbest: 1

opt_class: !name:torch.optim.AdamW
   lr: !ref <lr>
   betas: (0.9, 0.98)
   eps: 1.e-8
   weight_decay: !ref <weight_decay>

lr_scheduler: !new:speechbrain.nnet.schedulers.NoamScheduler
   lr_initial: !ref <lr>
   n_warmup_steps: !ref <warmup_steps>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
   checkpoints_dir: !ref <save_folder>
   recoverables:
      model: !ref <model>
      scheduler: !ref <lr_scheduler>
      normalizer: !ref <normalize>
      counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
   save_file: !ref <train_log>

# Functions that compute the statistics to track during the validation step.
error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
   loadables:
      model: !ref <model>
   paths:
      model: !ref /data/ocr/duyla3/Research/Sequqence_modeling/SpeechRecognition/Viettel_ASR/src/ASR/results/TRANSDUCER_BPE_viettel_asr_100h_30h_more_data/81001/save/CKPT+2023-10-09+15-27-42+00/model.ckpt